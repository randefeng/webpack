const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const  { CleanWebpackPlugin }  = require('clean-webpack-plugin');
//热更新
const webpack = require('webpack');
module.exports = {
  entry: {

    app: './src/index.js'
  },
  output: {
    filename: '[name].bundle.js',
    path: path.resolve(__dirname, 'dist'),
    // publicPath 也会在服务器脚本用到，以确保文件资源能够在 http://localhost:3000 下正确访
    //  后台的入口给后台配置的入口
    publicPath: '/'
  },
//   mode: 'production', //可压缩webpack4+
  ///开发环境中 好排查错误，能追踪到指定文件的错误
  devtool: 'inline-source-map',
  //   修改配置文件，告诉开发服务器(dev server)，在哪里查找文件：
//     devServer: {  等于SERVER.JS
//        contentBase: './dist',
//        hot: true
//    },
      module: {
         rules: [
           {
             test: /\.css$/,
             use: ['style-loader', 'css-loader']
           }
         ]
       },
  plugins: [
      //删除
    new CleanWebpackPlugin(),
    //根据出口吧页面上对应的URL HTML页面也修改掉引用地址 会产生 
    new HtmlWebpackPlugin({
      title: 'Output Management'
    }),
    //热更新添加的插件
         new webpack.NamedModulesPlugin(),
         new webpack.HotModuleReplacementPlugin()
  ],
 



//   performance: {
//     //因为限制了文件大小为250kb，如果超过就会提示
// //    You can limit the size of your bundles by using import() or require.ensure to lazy load some parts of your application.
//     // false | "error" | "warning" // 不显示性能提示 | 以错误形式提示 | 以警告...
//     hints: "warning",
//     // 开发环境设置较大防止警告
//     // 根据入口起点的最大体积，控制webpack何时生成性能提示,整数类型,以字节为单位
//     maxEntrypointSize: 5000000, 
//     // 最大单个资源体积，默认250000 (bytes)
//     maxAssetSize: 3000000
// }

};
